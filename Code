class EyeMouthStatusDetectionApp:
    def __init__(self, root, detector, predictor):
        self.root = root
        self.root.title("Eye and Mouth Status Detection")
        self.detector = detector
        self.predictor = predictor

        self.cap = cv2.VideoCapture(0)
        self.status_label = tk.Label(self.root, text="", font=("Helvetica", 16))
        self.status_label.pack()

        self.start_button = tk.Button(self.root, text="Start Detection", command=self.start_detection)
        self.start_button.pack(pady=10)

        self.stop_button = tk.Button(self.root, text="Stop Detection", command=self.stop_detection, state=tk.DISABLED)
        self.stop_button.pack(pady=10)

        self.panel = tk.Label(self.root)
        self.panel.pack(padx=10, pady=10)

        self.sleep = 0
        self.drowsy = 0
        self.active = 0
        self.status = ""
        self.color = (0, 0, 0)
        self.is_detecting = False
        self.update_status()

    def start_detection(self):
        self.is_detecting = True
        self.start_button.config(state=tk.DISABLED)
        self.stop_button.config(state=tk.NORMAL)
        self.update_status()

    def stop_detection(self):
        self.is_detecting = False
        self.start_button.config(state=tk.NORMAL)
        self.stop_button.config(state=tk.DISABLED)

    def compute(self, ptA, ptB):
        dist = np.linalg.norm(ptA - ptB)
        return dist

    def update_status(self):
        if not self.is_detecting:
            return

        _, frame = self.cap.read()
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

        # Perform face detection and status update here

        cv2.putText(frame, self.status, (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        cv2.imshow("Frame", frame)

        self.panel.img = ImageTk.PhotoImage(Image.fromarray(cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)))
        self.panel.config(image=self.panel.img)
        self.root.after(10, self.update_status)

    def run(self):
        self.root.mainloop()
        self.cap.release()
        cv2.destroyAllWindows()

if __name__ == "__main__":
    root = tk.Tk()
    detector = dlib.get_frontal_face_detector()
    predictor = dlib.shape_predictor("shape_predictor_68_face_landmarks.dat")
    app = EyeMouthStatusDetectionApp(root, detector, predictor)
    app.run()
